{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"margin",
				"margin-top"
			]
		]
	},
	"buffers":
	[
		{
			"file": ".gitignore",
			"settings":
			{
				"buffer_size": 198,
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					5,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAMYAAAAAAAAAxwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxgAAAAAAAADGAAAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": "*/s"
					},
					"AwAAAMcAAAAAAAAAyAAAAAAAAAAAAAAAyAAAAAAAAADJAAAAAAAAAAAAAADJAAAAAAAAAMoAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxwAAAAAAAADHAAAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": "ublim"
					},
					"BQAAAMoAAAAAAAAAywAAAAAAAAAAAAAAywAAAAAAAADMAAAAAAAAAAAAAADMAAAAAAAAAM0AAAAAAAAAAAAAAM0AAAAAAAAAzgAAAAAAAAAAAAAAzgAAAAAAAADPAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAygAAAAAAAADKAAAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": "e-projec"
					},
					"CAAAAM8AAAAAAAAA0AAAAAAAAAAAAAAA0AAAAAAAAADRAAAAAAAAAAAAAADRAAAAAAAAANIAAAAAAAAAAAAAANIAAAAAAAAA0wAAAAAAAAAAAAAA0wAAAAAAAADUAAAAAAAAAAAAAADUAAAAAAAAANUAAAAAAAAAAAAAANUAAAAAAAAA1gAAAAAAAAAAAAAA1gAAAAAAAADXAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzwAAAAAAAADPAAAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAANcAAAAAAAAA2AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1wAAAAAAAADXAAAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAMkAAAAAAAAAygAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyQAAAAAAAADJAAAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAAMcAAAAAAAAAxwAAAAAAAAACAAAAKi8",
					"AQAAAAAAAAABAAAAyQAAAAAAAADJAAAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					2,
					"swap_line_up",
					null,
					"BgAAAMcAAAAAAAAAxwAAAAAAAAAQAAAALnN1YmxpbWUtcHJvamVjdMYAAAAAAAAAxgAAAAAAAAABAAAACrcAAAAAAAAAuAAAAAAAAAAAAAAAtwAAAAAAAADHAAAAAAAAAAAAAAC3AAAAAAAAALcAAAAAAAAAEQAAAC5zdWJsaW1lLXByb2plY3QKpgAAAAAAAAC3AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxwAAAAAAAADHAAAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADXAAAAX3NpdGUvCi5zYXNzLWNhY2hlLwouamVreWxsLW1ldGFkYXRhCi5qZWt5bGwtY2FjaGUKKi9kYXRhLWl0LnltbAoqL2RhdGEtZGVzaWduLnltbAoqL2RhdGEtcGhhcm0ueW1sCiovZGF0YS10ZWNoLnltbAoqL2RhdGEtZGF0YS55bWwKKi9kYXRhLWJhci55bWwKKi9kYXRhLWZpdG5lc3MueW1sCi5zdWJsaW1lLXByb2plY3QKKi9leHBlcmllbmNlcy5tZAoqL3JlZmVyZW5jZXMubWQAAAAAAAAAANcAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApgAAAAAAAACmAAAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					7,
					"swap_line_up",
					null,
					"DgAAAKYAAAAAAAAApgAAAAAAAAARAAAALnN1YmxpbWUtcHJvamVjdAqTAAAAAAAAAKQAAAAAAAAAAAAAAJMAAAAAAAAAkwAAAAAAAAARAAAALnN1YmxpbWUtcHJvamVjdAqEAAAAAAAAAJUAAAAAAAAAAAAAAIQAAAAAAAAAhAAAAAAAAAARAAAALnN1YmxpbWUtcHJvamVjdAp0AAAAAAAAAIUAAAAAAAAAAAAAAHQAAAAAAAAAdAAAAAAAAAARAAAALnN1YmxpbWUtcHJvamVjdApkAAAAAAAAAHUAAAAAAAAAAAAAAGQAAAAAAAAAZAAAAAAAAAARAAAALnN1YmxpbWUtcHJvamVjdApTAAAAAAAAAGQAAAAAAAAAAAAAAFMAAAAAAAAAUwAAAAAAAAARAAAALnN1YmxpbWUtcHJvamVjdApBAAAAAAAAAFIAAAAAAAAAAAAAAEEAAAAAAAAAQQAAAAAAAAARAAAALnN1YmxpbWUtcHJvamVjdAozAAAAAAAAAEQAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApgAAAAAAAACmAAAAAAAAAAAAAAAAAPC/"
				],
				[
					38,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADXAAAAX3NpdGUvCi5zYXNzLWNhY2hlLwouamVreWxsLW1ldGFkYXRhCi5qZWt5bGwtY2FjaGUKLnN1YmxpbWUtcHJvamVjdAoqL2RhdGEtaXQueW1sCiovZGF0YS1kZXNpZ24ueW1sCiovZGF0YS1waGFybS55bWwKKi9kYXRhLXRlY2gueW1sCiovZGF0YS1kYXRhLnltbAoqL2RhdGEtYmFyLnltbAoqL2RhdGEtZml0bmVzcy55bWwKKi9leHBlcmllbmNlcy5tZAoqL3JlZmVyZW5jZXMubWQAAAAAAAAAAMYAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1wAAAAAAAADXAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "_data/data-bar.yml",
			"settings":
			{
				"buffer_size": 10968,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					11,
					30,
					"left_delete",
					null,
					"HgAAAG8CAAAAAAAAbwIAAAAAAAABAAAAbW4CAAAAAAAAbgIAAAAAAAABAAAAb20CAAAAAAAAbQIAAAAAAAABAAAAY2wCAAAAAAAAbAIAAAAAAAABAAAALmsCAAAAAAAAawIAAAAAAAABAAAAc2oCAAAAAAAAagIAAAAAAAABAAAAc2kCAAAAAAAAaQIAAAAAAAABAAAAZWgCAAAAAAAAaAIAAAAAAAABAAAAcmcCAAAAAAAAZwIAAAAAAAABAAAAcGYCAAAAAAAAZgIAAAAAAAABAAAAZGUCAAAAAAAAZQIAAAAAAAABAAAAcmQCAAAAAAAAZAIAAAAAAAABAAAAb2MCAAAAAAAAYwIAAAAAAAABAAAAd2ICAAAAAAAAYgIAAAAAAAABAAAALmECAAAAAAAAYQIAAAAAAAABAAAAbmACAAAAAAAAYAIAAAAAAAABAAAAZ18CAAAAAAAAXwIAAAAAAAABAAAAaV4CAAAAAAAAXgIAAAAAAAABAAAAc10CAAAAAAAAXQIAAAAAAAABAAAAZVwCAAAAAAAAXAIAAAAAAAABAAAAZFsCAAAAAAAAWwIAAAAAAAABAAAAZ1oCAAAAAAAAWgIAAAAAAAABAAAAblkCAAAAAAAAWQIAAAAAAAABAAAAdVgCAAAAAAAAWAIAAAAAAAABAAAAb1cCAAAAAAAAVwIAAAAAAAABAAAAeVYCAAAAAAAAVgIAAAAAAAABAAAAblUCAAAAAAAAVQIAAAAAAAABAAAAYVQCAAAAAAAAVAIAAAAAAAABAAAAaFMCAAAAAAAAUwIAAAAAAAABAAAAdFICAAAAAAAAUgIAAAAAAAABAAAAYQ",
					"AQAAAAAAAAABAAAAcAIAAAAAAABwAgAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					3,
					"left_delete",
					null,
					"AwAAAFECAAAAAAAAUQIAAAAAAAABAAAAblACAAAAAAAAUAIAAAAAAAABAAAAb08CAAAAAAAATwIAAAAAAAABAAAAag",
					"AQAAAAAAAAABAAAAUgIAAAAAAABSAgAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					8,
					"delete_word",
					{
						"forward": false
					},
					"CAAAAEQBAAAAAAAARAEAAAAAAAAFAAAAc21pbGVCAQAAAAAAAEIBAAAAAAAAAgAAAGEgPQEAAAAAAAA9AQAAAAAAAAUAAAB3aXRoIDMBAAAAAAAAMwEAAAAAAAAKAAAAY29ja3RhaWxzIC8BAAAAAAAALwEAAAAAAAAEAAAAYW5kICEBAAAAAAAAIQEAAAAAAAAOAAAAY29udmVyc2F0aW9ucyAeAQAAAAAAAB4BAAAAAAAAAwAAAHVwIBcBAAAAAAAAFwEAAAAAAAAHAAAATWl4aW5nIA",
					"AQAAAAAAAAABAAAASQEAAAAAAABJAQAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": "Reliable"
					},
					"CAAAABcBAAAAAAAAGAEAAAAAAAAAAAAAGAEAAAAAAAAZAQAAAAAAAAAAAAAZAQAAAAAAABoBAAAAAAAAAAAAABoBAAAAAAAAGwEAAAAAAAAAAAAAGwEAAAAAAAAcAQAAAAAAAAAAAAAcAQAAAAAAAB0BAAAAAAAAAAAAAB0BAAAAAAAAHgEAAAAAAAAAAAAAHgEAAAAAAAAfAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFwEAAAAAAAAXAQAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAABcBAAAAAAAAFwEAAAAAAAAIAAAAUmVsaWFibGU",
					"AQAAAAAAAAABAAAAHwEAAAAAAAAfAQAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": "Personable"
					},
					"CgAAABcBAAAAAAAAGAEAAAAAAAAAAAAAGAEAAAAAAAAZAQAAAAAAAAAAAAAZAQAAAAAAABoBAAAAAAAAAAAAABoBAAAAAAAAGwEAAAAAAAAAAAAAGwEAAAAAAAAcAQAAAAAAAAAAAAAcAQAAAAAAAB0BAAAAAAAAAAAAAB0BAAAAAAAAHgEAAAAAAAAAAAAAHgEAAAAAAAAfAQAAAAAAAAAAAAAfAQAAAAAAACABAAAAAAAAAAAAACABAAAAAAAAIQEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFwEAAAAAAAAXAQAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": " hi"
					},
					"AwAAACEBAAAAAAAAIgEAAAAAAAAAAAAAIgEAAAAAAAAjAQAAAAAAAAAAAAAjAQAAAAAAACQBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIQEAAAAAAAAhAQAAAAAAAAAAAAAAAPC/"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": "gh"
					},
					"AgAAACQBAAAAAAAAJQEAAAAAAAAAAAAAJQEAAAAAAAAmAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJAEAAAAAAAAkAQAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": " volume"
					},
					"BwAAACYBAAAAAAAAJwEAAAAAAAAAAAAAJwEAAAAAAAAoAQAAAAAAAAAAAAAoAQAAAAAAACkBAAAAAAAAAAAAACkBAAAAAAAAKgEAAAAAAAAAAAAAKgEAAAAAAAArAQAAAAAAAAAAAAArAQAAAAAAACwBAAAAAAAAAAAAACwBAAAAAAAALQEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJgEAAAAAAAAmAQAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": " bartender"
					},
					"CgAAAC0BAAAAAAAALgEAAAAAAAAAAAAALgEAAAAAAAAvAQAAAAAAAAAAAAAvAQAAAAAAADABAAAAAAAAAAAAADABAAAAAAAAMQEAAAAAAAAAAAAAMQEAAAAAAAAyAQAAAAAAAAAAAAAyAQAAAAAAADMBAAAAAAAAAAAAADMBAAAAAAAANAEAAAAAAAAAAAAANAEAAAAAAAA1AQAAAAAAAAAAAAA1AQAAAAAAADYBAAAAAAAAAAAAADYBAAAAAAAANwEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALQEAAAAAAAAtAQAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": " with"
					},
					"BQAAADcBAAAAAAAAOAEAAAAAAAAAAAAAOAEAAAAAAAA5AQAAAAAAAAAAAAA5AQAAAAAAADoBAAAAAAAAAAAAADoBAAAAAAAAOwEAAAAAAAAAAAAAOwEAAAAAAAA8AQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANwEAAAAAAAA3AQAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": " craft"
					},
					"BgAAADwBAAAAAAAAPQEAAAAAAAAAAAAAPQEAAAAAAAA+AQAAAAAAAAAAAAA+AQAAAAAAAD8BAAAAAAAAAAAAAD8BAAAAAAAAQAEAAAAAAAAAAAAAQAEAAAAAAABBAQAAAAAAAAAAAABBAQAAAAAAAEIBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPAEAAAAAAAA8AQAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": " cocktail"
					},
					"CQAAAEIBAAAAAAAAQwEAAAAAAAAAAAAAQwEAAAAAAABEAQAAAAAAAAAAAABEAQAAAAAAAEUBAAAAAAAAAAAAAEUBAAAAAAAARgEAAAAAAAAAAAAARgEAAAAAAABHAQAAAAAAAAAAAABHAQAAAAAAAEgBAAAAAAAAAAAAAEgBAAAAAAAASQEAAAAAAAAAAAAASQEAAAAAAABKAQAAAAAAAAAAAABKAQAAAAAAAEsBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQgEAAAAAAABCAQAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEsBAAAAAAAATAEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASwEAAAAAAABLAQAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": "training"
					},
					"CAAAAEwBAAAAAAAATQEAAAAAAAAAAAAATQEAAAAAAABOAQAAAAAAAAAAAABOAQAAAAAAAE8BAAAAAAAAAAAAAE8BAAAAAAAAUAEAAAAAAAAAAAAAUAEAAAAAAABRAQAAAAAAAAAAAABRAQAAAAAAAFIBAAAAAAAAAAAAAFIBAAAAAAAAUwEAAAAAAAAAAAAAUwEAAAAAAABUAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATAEAAAAAAABMAQAAAAAAAAAAAAAAAPC/"
				],
				[
					56,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFQBAAAAAAAAVQEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVAEAAAAAAABUAQAAAAAAAAAAAAAAAPC/"
				],
				[
					59,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAVQEAAAAAAABVAQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "_data/data.yml",
			"settings":
			{
				"buffer_size": 10968,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					4,
					1,
					"image_paste",
					null,
					"",
					"AQAAAAAAAAABAAAAAAAAAAAAAABLKwAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAAgQAAAAAAAACBAAAAAAAAAAAAAAAAPC/"
				],
				[
					71,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAEAMAAAAAAAAQAwAAAAAAAAAAAAAAAPC/"
				],
				[
					79,
					1,
					"image_paste",
					null,
					"",
					"AQAAAAAAAAABAAAAAAAAAAAAAADAJwAAAAAAAAAAAAAAAPC/"
				]
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"check",
				"Git: Checkout Tag"
			],
			[
				"checko",
				"Git: Checkout Current File"
			],
			[
				"package",
				"Package Control: Install Package"
			],
			[
				"termina",
				"Terminus: Toggle Panel"
			],
			[
				"git remo",
				"Git: Track Remote Branch"
			],
			[
				"termin",
				"Terminus: Toggle Panel"
			],
			[
				"remote",
				"Git: Track Remote Branch"
			],
			[
				"git",
				"Git: Push"
			],
			[
				"commit",
				"Git: Commit"
			],
			[
				"git bran",
				"Git: Change Branch"
			],
			[
				"bran",
				"Git: Change Branch"
			],
			[
				"branc",
				"Git: Change Branch"
			],
			[
				"commit ",
				"Git: Commit"
			],
			[
				"pref",
				"Preferences: Settings"
			],
			[
				"prefer",
				"Preferences: Settings"
			],
			[
				"settings",
				"Preferences: Settings"
			],
			[
				"package insta",
				"Package Control: Install Package"
			],
			[
				"branch",
				"Git: Change Branch"
			],
			[
				"pull",
				"Git: Pull"
			],
			[
				"git pull",
				"Git: Pull"
			],
			[
				"packa ins",
				"Package Control: Install Package"
			],
			[
				"prefere",
				"Preferences: Settings"
			],
			[
				"theme",
				"UI: Customize Color Scheme"
			],
			[
				"packa",
				"Package Control: Clear Cache Directory"
			],
			[
				"remove",
				"Package Control: Remove Repository"
			],
			[
				"zk",
				"ZK: New Zettel Note"
			],
			[
				"new z",
				"ZK: New Zettel Note"
			],
			[
				"new ",
				"ZK: New Zettel Note"
			],
			[
				"new zk",
				"ZK: New Zettel Note"
			],
			[
				"new",
				"ZK: New Zettel Note"
			],
			[
				"notes",
				"Notes: Index"
			],
			[
				"note",
				"Notes: List…"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"Package Control: ",
				"Package Control: Enable Package"
			],
			[
				"notedown",
				"Notedown: Edit User Settings"
			],
			[
				"key",
				"Preferences: Key Bindings"
			],
			[
				"keybin",
				"Preferences: Key Bindings"
			],
			[
				"markdown",
				"Set Syntax: Markdown"
			],
			[
				"download",
				"Sync Settings: Download"
			],
			[
				"sync",
				"Sync Settings: Edit User Settings"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 268.0,
		"history":
		[
			"pnpm dev",
			"pnpm -dev"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/D/!ⰴArchive/!ⰴArchive.s/!@occ/cv",
		"/D/!ⰴArchive/!ⰴArchive.s/!@occ/cv/_data"
	],
	"file_history":
	[
		"/D/!ⰴArchive/!ⰴArchive.s/!@occ/cv/_data/data-bar.yml",
		"/D/Dropbox/!ⰳResources/ι❔.thesaurus.emo.md",
		"/D/Dropbox/!ⰰJinn/k1.md",
		"/D/Dropbox/!ⰰJinn/202407291509 zk1.md",
		"/D/Dropbox/!ⰰJinn/zk1.md",
		"/D/Dropbox/!ⰰJinn/zk.sublime-project",
		"/D/Dropbox/!ⰰJinn/zk.md",
		"/D/Dropbox/!ⰰJinn/202407291506 zk.md",
		"/C/Users/jy/AppData/Roaming/Sublime Text/Packages/sublime_zk/sublime_zk.sublime-settings",
		"/D/Dropbox/!ⰰJinn/.brain/Inbox.note",
		"/C/Users/jy/AppData/Roaming/Sublime Text/Packages/User/Notes.sublime-settings",
		"/C/Users/jy/AppData/Roaming/Sublime Text/Packages/User/Notedown.sublime-settings",
		"/C/Users/jy/AppData/Roaming/Sublime Text/Packages/sublime_zk/Default (Windows).sublime-keymap",
		"/C/Users/jy/AppData/Roaming/Sublime Text/Packages/Default/Default (Windows).sublime-keymap",
		"/C/Users/jy/AppData/Roaming/Sublime Text/Packages/User/Default (Windows).sublime-keymap",
		"/C/Users/jy/AppData/Roaming/Anki2/addons21/24411424/custom_shortcuts.py",
		"/D/Dropbox/!ⰰJinn/.obsidian/themes/Perso/theme.css",
		"/D/Dropbox/!ⰰJinn/.obsidian/themes/Pure/theme.css",
		"/D/Dropbox/!ⰰJinn/.obsidian/themes/Atom/theme.css",
		"/D/Dropbox/!ⰰJinn/.obsidian/themes/Minimal/theme.css",
		"/C/Users/jy/AppData/Roaming/Sublime Text/Packages/User/SyncSettings.sublime-settings"
	],
	"find":
	{
		"height": 27.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": ".gitignore",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 198,
						"regions":
						{
						},
						"selection":
						[
							[
								198,
								198
							]
						],
						"settings":
						{
							"syntax": "Packages/Git Formats/Git Ignore.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "_data/data-bar.yml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10968,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								10968
							]
						],
						"settings":
						{
							"syntax": "Packages/YAML/YAML.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2634.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "_data/data.yml",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10968,
						"regions":
						{
						},
						"selection":
						[
							[
								10968,
								10968
							]
						],
						"settings":
						{
							"syntax": "Packages/YAML/YAML.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2785.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 27.0
	},
	"input":
	{
		"height": 39.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.Terminus":
	{
		"height": 278.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.git":
	{
		"height": 345.0
	},
	"pinned_build_system": "",
	"project": "cv.sublime-project",
	"replace":
	{
		"height": 50.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"![[zk]]"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 176.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
